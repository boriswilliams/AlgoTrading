// https://docs.alpaca.markets/openapi/673e19f7fd59830026ac651b

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/corporate-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Corporate actions
         * @description This endpoint provides data about the corporate actions for each given symbol over a specified time period.
         *
         */
        get: operations["CorporateActions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/forex/latest/rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest rates for currency pairs
         * @description Get the latest forex rates for the given currency pairs.
         *
         */
        get: operations["LatestRates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/forex/rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical rates for currency pairs
         * @description Get historical forex rates for the given currency pairs in the given time interval and at the given timeframe (snapshot frequency).
         *
         */
        get: operations["Rates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/logos/{symbol}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Logos
         * @description Get the image of the company logo for the given symbol.
         */
        get: operations["Logos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/news": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * News articles
         * @description Returns latest news articles across stocks and crypto. By default, returns latest 10 news articles.
         */
        get: operations["News"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/options/bars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical bars
         * @description The historical option bars API provides aggregates for a list of option symbols between the specified dates.
         *
         *     The returned results are sorted by symbol first, then by bar timestamp.
         *     This means that you are likely to see only one symbol in your first response if there are enough bars for that symbol to hit the limit you requested.
         *
         *     In these situations, if you keep requesting again with the `next_page_token` from the previous response, you will eventually reach the other symbols if any bars were found for them.
         */
        get: operations["optionBars"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/options/meta/conditions/{ticktype}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Condition codes
         * @description Returns the mapping between the condition codes and names.
         */
        get: operations["OptionMetaConditions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/options/meta/exchanges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Exchange codes
         * @description Returns the mapping between the option exchange codes and the corresponding exchanges names.
         */
        get: operations["OptionMetaExchanges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/options/quotes/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest quotes
         * @description The latest multi-quotes endpoint provides the latest bid and ask prices for each given contract symbol.
         *
         */
        get: operations["OptionLatestQuotes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/options/snapshots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Snapshots
         * @description The snapshots endpoint provides the latest trade, latest quote and greeks for each given contract symbol.
         *
         */
        get: operations["OptionSnapshots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/options/snapshots/{underlying_symbol}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Option chain
         * @description The option chain endpoint provides the latest trade, latest quote, and greeks for each contract symbol of the underlying symbol.
         *
         */
        get: operations["OptionChain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/options/trades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical trades
         * @description The historical option trades API provides trade data for a list of contract symbols between the specified dates up to 7 days ago.
         *
         *     The returned results are sorted by symbol first then by trade timestamp.
         *     This means that you are likely to see only one symbol in your first response if there are enough trades for that symbol to hit the limit you requested.
         *
         *     In these situations, if you keep requesting again with the `next_page_token` from the previous response, you will eventually reach the other symbols if any trades were found for them.
         */
        get: operations["OptionTrades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/options/trades/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest trades
         * @description The latest multi-trades endpoint provides the latest historical trade data for multiple given contract symbols.
         *
         */
        get: operations["OptionLatestTrades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/screener/stocks/most-actives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Most active stocks
         * @description Returns the most active stocks by volume or trade count. By default returns the top 10 symbols by volume.
         *
         */
        get: operations["MostActives"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/screener/{market_type}/movers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Top market movers
         * @description Returns the top market movers (gainers and losers). The change for each symbol is calculated
         *     from the previous closing price and the latest closing price.
         *
         *     For stocks, the endpoint resets at market open. Until then, it shows the previous market day's movers.
         *     The data is split-adjusted. Only tradable symbols are included.
         *
         *     For crypto, the endpoint resets at midnight.
         */
        get: operations["Movers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/crypto-perps/{loc}/latest/bars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest bars
         * @description The latest bars endpoint returns the latest bar data for the crypto perpetual futures symbols provided.
         *
         */
        get: operations["CryptoPerpLatestBars"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/crypto-perps/{loc}/latest/orderbooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest orderbook
         * @description The latest orderbook endpoint returns the latest bid and ask orderbook for the crypto perpetual futures symbols provided.
         *
         */
        get: operations["CryptoPerpLatestOrderbooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/crypto-perps/{loc}/latest/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest quotes
         * @description The latest quotes endpoint returns the latest bid and ask prices for the crypto perpetual futures symbols provided.
         *
         */
        get: operations["CryptoPerpLatestQuotes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta1/crypto-perps/{loc}/latest/trades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest trades
         * @description The latest trades endpoint returns the latest trade data for the crypto perpetual futures symbols provided.
         *
         */
        get: operations["CryptoPerpLatestTrades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta3/crypto/{loc}/bars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical bars
         * @description The crypto bars API provides historical aggregates for a list of crypto symbols between the specified dates.
         */
        get: operations["CryptoBars"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta3/crypto/{loc}/latest/bars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest bars
         * @description The latest multi-bars endpoint returns the latest minute-aggregated historical bar data for each of the crypto symbols provided.
         *
         */
        get: operations["CryptoLatestBars"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta3/crypto/{loc}/latest/orderbooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest orderbook
         * @description The latest orderbook endpoint returns the latest bid and ask orderbook for the crypto symbols provided.
         *
         */
        get: operations["CryptoLatestOrderbooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta3/crypto/{loc}/latest/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest quotes
         * @description The latest quotes endpoint returns the latest bid and ask prices for the crypto symbols provided.
         *
         */
        get: operations["CryptoLatestQuotes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta3/crypto/{loc}/latest/trades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest trades
         * @description The latest trades endpoint returns the latest trade data for the crypto symbols provided.
         *
         */
        get: operations["CryptoLatestTrades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta3/crypto/{loc}/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical quotes
         * @description The crypto quotes API provides historical quote data for a list of crypto symbols between the specified dates.
         */
        get: operations["CryptoQuotes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta3/crypto/{loc}/snapshots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Snapshots
         * @description The snapshots endpoint returns the latest trade, latest quote, latest minute bar, latest daily bar, and previous daily bar data for crypto symbols.
         *
         */
        get: operations["CryptoSnapshots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1beta3/crypto/{loc}/trades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical trades
         * @description The crypto trades API provides historical trade data for a list of crypto symbols between the specified dates.
         */
        get: operations["CryptoTrades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/auctions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical auctions
         * @description The historical auctions endpoint provides auction prices for a list of stock symbols between the specified dates.
         *
         */
        get: operations["StockAuctions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/bars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical bars
         * @description The historical stock bars API provides aggregates for a list of stock symbols between the specified dates.
         *
         *     The returned results are sorted by symbol first, then by bar timestamp.
         *     This means that you are likely to see only one symbol in your first response if there are enough bars for that symbol to hit the limit you requested.
         *
         *     In these situations, if you keep requesting again with the `next_page_token` from the previous response, you will eventually reach the other symbols if any bars were found for them.
         */
        get: operations["StockBars"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/bars/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest bars
         * @description The latest multi-bars endpoint returns the latest minute-aggregated historical bar data for the ticker symbols provided.
         *
         */
        get: operations["StockLatestBars"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/meta/conditions/{ticktype}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Condition codes
         * @description Returns the mapping between the condition codes and names.
         */
        get: operations["StockMetaConditions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/meta/exchanges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Exchange codes
         * @description Returns the mapping between the stock exchange codes and the corresponding exchanges names.
         *
         */
        get: operations["StockMetaExchanges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical quotes
         * @description The historical stock quotes API provides quote data for a list of stock symbols between the specified dates.
         *
         *     The returned results are sorted by symbol first, then by the quote timestamp.
         *     This means that you are likely to see only one symbol in your first response if there are enough quotes for that symbol to hit the limit you requested.
         *
         *     In these situations, if you keep requesting again with the `next_page_token` from the previous response, you will eventually reach the other symbols if any quotes were found for them.
         */
        get: operations["StockQuotes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/quotes/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest quotes
         * @description The latest multi-quotes endpoint provides the latest bid and ask prices for each given ticker symbols.
         *
         */
        get: operations["StockLatestQuotes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/snapshots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Snapshots
         * @description The snapshot endpoint for multiple tickers provides the latest trade, latest quote, minute bar, daily bar, and previous daily bar data for each given ticker symbol.
         *
         */
        get: operations["StockSnapshots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/trades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical trades
         * @description The historical stock trades API provides trade data for a list of stock symbols between the specified dates.
         *
         *     The returned results are sorted by symbol first then by trade timestamp.
         *     This means that you are likely to see only one symbol in your first response if there are enough trades for that symbol to hit the limit you requested.
         *
         *     In these situations, if you keep requesting again with the `next_page_token` from the previous response, you will eventually reach the other symbols if any trades were found for them.
         */
        get: operations["StockTrades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/trades/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest trades
         * @description The latest multi-trades endpoint provides the latest historical trade data for the given ticker symbols.
         *
         */
        get: operations["StockLatestTrades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/{symbol}/auctions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical auctions (single)
         * @description The historical auctions endpoint provides auction prices for the given stock symbol between the specified dates.
         *
         */
        get: operations["StockAuctionSingle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/{symbol}/bars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical bars (single symbol)
         * @description The historical stock bars API provides aggregates for the stock symbol between the specified dates.
         */
        get: operations["StockBarSingle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/{symbol}/bars/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest bar (single symbol)
         * @description The latest stock bars endpoint returns the latest minute-aggregated historical bar for the requested security.
         *
         */
        get: operations["StockLatestBarSingle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/{symbol}/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical quotes (single symbol)
         * @description The historical stock quotes API provides quote data for a stock symbol between the specified dates.
         */
        get: operations["StockQuoteSingle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/{symbol}/quotes/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest quote (single symbol)
         * @description The latest quotes endpoint provides the latest bid and ask prices for a given ticker symbol.
         *
         */
        get: operations["StockLatestQuoteSingle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/{symbol}/snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Snapshot (single symbol)
         * @description The snapshot endpoint provides the latest trade, latest quote, minute bar, daily bar, and previous daily bar data for a given ticker symbol.
         *
         */
        get: operations["StockSnapshotSingle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/{symbol}/trades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Historical trades (single symbol)
         * @description The historical stock trades API provides trade data for a stock symbol between the specified dates.
         */
        get: operations["StockTradeSingle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/stocks/{symbol}/trades/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest trade (single symbol)
         * @description The latest trades endpoint provides the latest trade data for a given ticker symbol.
         *
         */
        get: operations["StockLatestTradeSingle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description Cash dividend.
         * @example {
         *       "ex_date": "2023-05-04",
         *       "foreign": false,
         *       "payable_date": "2023-05-19",
         *       "process_date": "2023-05-19",
         *       "rate": 0.125,
         *       "record_date": "2023-05-05",
         *       "special": false,
         *       "symbol": "FCF"
         *     }
         */
        CACashDividend: {
            symbol: string;
            /** Format: double */
            rate: number;
            special: boolean;
            foreign: boolean;
            process_date: components["schemas"]["CAProcessDate"];
            ex_date: components["schemas"]["CAExDate"];
            record_date?: components["schemas"]["CARecordDate"];
            payable_date?: components["schemas"]["CAPayableDate"];
            /** Format: date */
            due_bill_on_date?: string;
            /** Format: date */
            due_bill_off_date?: string;
        };
        /**
         * @description Cash merger.
         * @example {
         *       "acquiree_symbol": "GLOP",
         *       "effective_date": "2023-07-17",
         *       "payable_date": "2023-07-17",
         *       "process_date": "2023-07-17",
         *       "rate": 5.37
         *     }
         */
        CACashMerger: {
            acquirer_symbol?: string;
            acquiree_symbol: string;
            /** Format: double */
            rate: number;
            process_date: components["schemas"]["CAProcessDate"];
            effective_date: components["schemas"]["CAEffectiveDate"];
            payable_date?: components["schemas"]["CAPayableDate"];
        };
        CACorporateActions: {
            reverse_splits?: components["schemas"]["CAReverseSplit"][];
            forward_splits?: components["schemas"]["CAForwardSplit"][];
            unit_splits?: components["schemas"]["CAUnitSplit"][];
            stock_dividends?: components["schemas"]["CAStockDividend"][];
            cash_dividends?: components["schemas"]["CACashDividend"][];
            spin_offs?: components["schemas"]["CASpinOff"][];
            cash_mergers?: components["schemas"]["CACashMerger"][];
            stock_mergers?: components["schemas"]["CAStockMerger"][];
            stock_and_cash_mergers?: components["schemas"]["CAStockAndCashMerger"][];
            redemptions?: components["schemas"]["CARedemption"][];
            name_changes?: components["schemas"]["CANameChange"][];
            worthless_removals?: components["schemas"]["CAWorthlessRemoval"][];
            rights_distributions?: {
                source_symbol: string;
                new_symbol: string;
                /** Format: double */
                rate: number;
                process_date: components["schemas"]["CAProcessDate"];
                ex_date: components["schemas"]["CAExDate"];
                record_date?: components["schemas"]["CARecordDate"];
                payable_date: components["schemas"]["CAPayableDate"];
                /** Format: date */
                expiration_date?: string;
            }[];
        };
        CACorporateActionsResp: {
            corporate_actions: components["schemas"]["CACorporateActions"];
            next_page_token: components["schemas"]["NextPageToken"];
        };
        /** Format: date */
        CADueBillRedemptionDate: string;
        /**
         * Format: date
         * @description The effective date marks the cutoff point for shareholders to be credited.
         */
        CAEffectiveDate: string;
        /**
         * Format: date
         * @description The ex-date marks the cutoff point for shareholders to be credited.
         */
        CAExDate: string;
        /**
         * @description Forward split.
         * @example {
         *       "due_bill_redemption_date": "2023-08-23",
         *       "ex_date": "2023-08-22",
         *       "new_rate": 2,
         *       "old_rate": 1,
         *       "payable_date": "2023-08-21",
         *       "process_date": "2023-08-22",
         *       "record_date": "2023-08-14",
         *       "symbol": "SRE"
         *     }
         */
        CAForwardSplit: {
            symbol: string;
            /** Format: double */
            new_rate: number;
            /** Format: double */
            old_rate: number;
            process_date: components["schemas"]["CAProcessDate"];
            ex_date: components["schemas"]["CAExDate"];
            record_date?: components["schemas"]["CARecordDate"];
            payable_date?: components["schemas"]["CAPayableDate"];
            due_bill_redemption_date?: components["schemas"]["CADueBillRedemptionDate"];
        };
        /**
         * @description Name change.
         * @example {
         *       "new_symbol": "VFS",
         *       "old_symbol": "BSAQ",
         *       "process_date": "2023-08-15"
         *     }
         */
        CANameChange: {
            old_symbol: string;
            new_symbol: string;
            process_date: components["schemas"]["CAProcessDate"];
        };
        /** Format: date */
        CAPayableDate: string;
        /**
         * Format: date
         * @description The date when the corporate action is processed by Alpaca.
         */
        CAProcessDate: string;
        /** Format: date */
        CARecordDate: string;
        /**
         * @description Redemption.
         * @example {
         *       "payable_date": "2023-06-13",
         *       "process_date": "2023-06-13",
         *       "rate": 0.141134,
         *       "symbol": "ORPHY"
         *     }
         */
        CARedemption: {
            symbol: string;
            /** Format: double */
            rate: number;
            process_date: components["schemas"]["CAProcessDate"];
            payable_date?: components["schemas"]["CAPayableDate"];
        };
        /**
         * @description Reverse split.
         * @example {
         *       "ex_date": "2023-08-24",
         *       "new_rate": 1,
         *       "old_rate": 50,
         *       "process_date": "2023-08-24",
         *       "record_date": "2023-08-24",
         *       "symbol": "MNTS"
         *     }
         */
        CAReverseSplit: {
            symbol: string;
            /** Format: double */
            new_rate: number;
            /** Format: double */
            old_rate: number;
            process_date: components["schemas"]["CAProcessDate"];
            ex_date: components["schemas"]["CAExDate"];
            record_date?: components["schemas"]["CARecordDate"];
            payable_date?: components["schemas"]["CAPayableDate"];
        };
        /**
         * @description Spin-off.
         * @example {
         *       "ex_date": "2023-08-15",
         *       "new_rate": 1,
         *       "new_symbol": "SRM",
         *       "process_date": "2023-08-15",
         *       "record_date": "2023-08-15",
         *       "source_rate": 19.35,
         *       "source_symbol": "JUPW"
         *     }
         */
        CASpinOff: {
            source_symbol: string;
            /** Format: double */
            source_rate: number;
            new_symbol: string;
            /** Format: double */
            new_rate: number;
            process_date: components["schemas"]["CAProcessDate"];
            ex_date: components["schemas"]["CAExDate"];
            record_date?: components["schemas"]["CARecordDate"];
            payable_date?: components["schemas"]["CAPayableDate"];
            due_bill_redemption_date?: components["schemas"]["CADueBillRedemptionDate"];
        };
        /**
         * @description Stock and cash merger.
         * @example {
         *       "acquiree_rate": 1,
         *       "acquiree_symbol": "MLVF",
         *       "acquirer_rate": 0.7733,
         *       "acquirer_symbol": "FRBA",
         *       "cash_rate": 7.8,
         *       "effective_date": "2023-07-18",
         *       "payable_date": "2023-07-18",
         *       "process_date": "2023-07-18"
         *     }
         */
        CAStockAndCashMerger: {
            acquirer_symbol: string;
            /** Format: double */
            acquirer_rate: number;
            acquiree_symbol: string;
            /** Format: double */
            acquiree_rate: number;
            /** Format: double */
            cash_rate: number;
            process_date: components["schemas"]["CAProcessDate"];
            effective_date: components["schemas"]["CAEffectiveDate"];
            payable_date?: components["schemas"]["CAPayableDate"];
        };
        /**
         * @description Stock dividend.
         * @example {
         *       "ex_date": "2023-05-19",
         *       "payable_date": "2023-05-05",
         *       "process_date": "2023-05-19",
         *       "rate": 0.05,
         *       "record_date": "2023-05-22",
         *       "symbol": "MSBC"
         *     }
         */
        CAStockDividend: {
            symbol: string;
            /** Format: double */
            rate: number;
            process_date: components["schemas"]["CAProcessDate"];
            ex_date: components["schemas"]["CAExDate"];
            record_date?: components["schemas"]["CARecordDate"];
            payable_date?: components["schemas"]["CAPayableDate"];
        };
        /**
         * @description Stock merger.
         * @example {
         *       "acquiree_rate": 1,
         *       "acquiree_symbol": "LSI",
         *       "acquirer_rate": 0.895,
         *       "acquirer_symbol": "EXR",
         *       "effective_date": "2023-07-20",
         *       "payable_date": "2023-07-20",
         *       "process_date": "2023-07-20"
         *     }
         */
        CAStockMerger: {
            acquirer_symbol: string;
            /** Format: double */
            acquirer_rate: number;
            acquiree_symbol: string;
            /** Format: double */
            acquiree_rate: number;
            process_date: components["schemas"]["CAProcessDate"];
            effective_date: components["schemas"]["CAEffectiveDate"];
            payable_date?: components["schemas"]["CAPayableDate"];
        };
        /**
         * @description Unit split.
         * @example {
         *       "alternate_rate": 0.3333,
         *       "alternate_symbol": "LVROW",
         *       "effective_date": "2023-03-01",
         *       "new_rate": 1,
         *       "new_symbol": "LVRO",
         *       "old_rate": 1,
         *       "old_symbol": "TPBAU",
         *       "process_date": "2023-03-01"
         *     }
         */
        CAUnitSplit: {
            old_symbol: string;
            /** Format: double */
            old_rate: number;
            new_symbol: string;
            /** Format: double */
            new_rate: number;
            alternate_symbol: string;
            /** Format: double */
            alternate_rate: number;
            process_date: components["schemas"]["CAProcessDate"];
            effective_date: components["schemas"]["CAEffectiveDate"];
            payable_date?: components["schemas"]["CAPayableDate"];
        };
        /**
         * @description Worthless removal.
         * @example {
         *       "symbol": "ATNXQ",
         *       "process_date": "2023-10-11"
         *     }
         */
        CAWorthlessRemoval: {
            symbol: string;
            process_date: components["schemas"]["CAProcessDate"];
        };
        /**
         * @description OHLC aggregate of all the trades in a given interval.
         * @example {
         *       "t": "2022-05-27T10:18:00Z",
         *       "o": 28999,
         *       "h": 29003,
         *       "l": 28999,
         *       "c": 29003,
         *       "v": 0.01,
         *       "n": 4,
         *       "vw": 29001
         *     }
         */
        CryptoBar: {
            t: components["schemas"]["Timestamp"];
            /**
             * Format: double
             * @description Opening price.
             */
            o: number;
            /**
             * Format: double
             * @description High price.
             */
            h: number;
            /**
             * Format: double
             * @description Low price.
             */
            l: number;
            /**
             * Format: double
             * @description Closing price.
             */
            c: number;
            /**
             * Format: double
             * @description Bar volume.
             */
            v: number;
            /**
             * Format: int64
             * @description Trade count in the bar.
             */
            n: number;
            /**
             * Format: double
             * @description Volume weighted average price.
             */
            vw: number;
        };
        CryptoBarsResp: {
            bars: {
                [key: string]: components["schemas"]["CryptoBar"][];
            };
            next_page_token: components["schemas"]["NextPageToken"];
        };
        CryptoLatestBarsResp: {
            bars: {
                [key: string]: components["schemas"]["CryptoBar"];
            };
        };
        CryptoLatestOrderbooksResp: {
            orderbooks: {
                [key: string]: components["schemas"]["CryptoOrderbook"];
            };
        };
        CryptoLatestQuotesResp: {
            quotes: {
                [key: string]: components["schemas"]["CryptoQuote"];
            };
        };
        CryptoLatestTradesResp: {
            trades: {
                [key: string]: components["schemas"]["CryptoTrade"];
            };
        };
        /**
         * @description Crypto location.
         * @enum {string}
         */
        CryptoLoc: "us";
        /**
         * @description Snapshot of the orderbook.
         * @example {
         *       "t": "2022-06-24T08:00:14.137774336Z",
         *       "b": [
         *         {
         *           "p": 20846,
         *           "s": 0.1902
         *         },
         *         {
         *           "p": 20350,
         *           "s": 0
         *         }
         *       ],
         *       "a": [
         *         {
         *           "p": 20902,
         *           "s": 0.0097
         *         },
         *         {
         *           "p": 21444,
         *           "s": 0
         *         }
         *       ]
         *     }
         */
        CryptoOrderbook: {
            t: components["schemas"]["Timestamp"];
            b: components["schemas"]["CryptoOrderbookEntry"][];
            a: components["schemas"]["CryptoOrderbookEntry"][];
        };
        /**
         * @description A single entry in a crypto orderbook.
         * @example {
         *       "p": 20846,
         *       "s": 0.1902
         *     }
         */
        CryptoOrderbookEntry: {
            /**
             * Format: double
             * @description Price.
             */
            p: number;
            /**
             * Format: double
             * @description Size.
             */
            s: number;
        };
        /**
         * @description The best bid and ask information for a given security.
         * @example {
         *       "t": "2022-05-26T11:47:18.44347136Z",
         *       "bp": 29058,
         *       "bs": 0.3544,
         *       "ap": 29059,
         *       "as": 3.252
         *     }
         */
        CryptoQuote: {
            t: components["schemas"]["Timestamp"];
            /**
             * Format: double
             * @description Bid price.
             */
            bp: number;
            /**
             * Format: double
             * @description Bid size.
             */
            bs: number;
            /**
             * Format: double
             * @description Ask price.
             */
            ap: number;
            /**
             * Format: double
             * @description Ask size.
             */
            as: number;
        };
        CryptoQuotesResp: {
            quotes: {
                [key: string]: components["schemas"]["CryptoQuote"][];
            };
            next_page_token: components["schemas"]["NextPageToken"];
        };
        /** @description A snapshot provides the latest trade, latest quote, latest minute bar, latest daily bar and previous daily bar.
         *      */
        CryptoSnapshot: {
            dailyBar?: components["schemas"]["CryptoBar"];
            latestQuote?: components["schemas"]["CryptoQuote"];
            latestTrade?: components["schemas"]["CryptoTrade"];
            minuteBar?: components["schemas"]["CryptoBar"];
            prevDailyBar?: components["schemas"]["CryptoBar"];
        };
        CryptoSnapshotsResp: {
            snapshots: {
                [key: string]: components["schemas"]["CryptoSnapshot"];
            };
        };
        /**
         * @description A crypto trade.
         * @example {
         *       "t": "2022-05-18T12:00:05.225055Z",
         *       "p": 29798,
         *       "s": 0.1209,
         *       "tks": "S",
         *       "i": 31455277
         *     }
         */
        CryptoTrade: {
            t: components["schemas"]["Timestamp"];
            /**
             * Format: double
             * @description Trade price.
             */
            p: number;
            /**
             * Format: double
             * @description Trade size.
             */
            s: number;
            /**
             * Format: int64
             * @description Trade ID.
             */
            i: number;
            /** @description Taker side: B for buyer, S for seller
             *      */
            tks: string;
        };
        CryptoTradesResp: {
            trades: {
                [key: string]: components["schemas"]["CryptoTrade"][];
            };
            next_page_token: components["schemas"]["NextPageToken"];
        };
        /**
         * @description A comma-separated string with currency pairs.
         * @example USDJPY,USDMXN
         */
        ForexCurrencyPairs: string;
        /** @description The response object of the latest forex rates. */
        ForexLatestRatesResp: {
            rates: {
                [key: string]: components["schemas"]["ForexRate"];
            };
        };
        /**
         * @description A foreign exchange rate between two currencies at a given time.
         * @example {
         *       "bp": 127.702,
         *       "mp": 127.757,
         *       "ap": 127.763,
         *       "t": "2022-04-20T18:23:00Z"
         *     }
         */
        ForexRate: {
            /**
             * Format: double
             * @description The last bid price value of the currency at the end of the timeframe.
             */
            bp: number;
            /**
             * Format: double
             * @description The last mid price value of the currency at the end of the timeframe.
             */
            mp: number;
            /**
             * Format: double
             * @description The last ask price value of the currency at the end of the timeframe.
             */
            ap: number;
            /**
             * Format: date-time
             * @description Timestamp of the rate.
             */
            t: string;
        };
        ForexRatesResp: {
            rates: {
                [key: string]: components["schemas"]["ForexRate"][];
            };
            next_page_token: components["schemas"]["NextPageToken"];
        };
        /** @description Model representing a news article from the Alpaca Market Data API. */
        News: {
            /**
             * Format: int64
             * @description News article ID.
             */
            id: number;
            /** @description Headline or title of the article. */
            headline: string;
            /** @description Original author of news article. */
            author: string;
            /**
             * Format: date-time
             * @description Date article was created (RFC-3339).
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date article was updated (RFC-3339).
             */
            updated_at: string;
            /** @description Summary text for the article (may be first sentence of content). */
            summary: string;
            /** @description Content of the news article (might contain HTML). */
            content: string;
            /**
             * Format: uri
             * @description URL of article (if applicable).
             */
            url?: string | null;
            /** @description List of images (URLs) related to given article (may be empty). */
            images: components["schemas"]["NewsImage"][];
            /** @description List of related or mentioned symbols. */
            symbols: string[];
            /** @description Source where the news originated from (e.g. Benzinga). */
            source: string;
        };
        /** @description A model representing images for a news article. Simply a URL to the image along with a size parameter suggesting the display size of the image. */
        NewsImage: {
            /**
             * @description Possible values for size are thumb, small and large.
             * @example thumb
             * @enum {string}
             */
            size: "thumb" | "small" | "large";
            /**
             * Format: uri
             * @description URL to image from news article.
             */
            url: string;
        };
        NewsResp: {
            news: components["schemas"]["News"][];
            next_page_token: components["schemas"]["NextPageToken"];
        };
        /** @description Pagination token for next page. */
        NextPageToken: string | null;
        /**
         * @description OHLC aggregate of all the trades in a given interval.
         * @example {
         *       "t": "2024-01-18T05:00:00Z",
         *       "o": 0.28,
         *       "h": 0.28,
         *       "l": 0.23,
         *       "c": 0.23,
         *       "v": 224,
         *       "n": 26,
         *       "vw": 0.245045
         *     }
         */
        OptionBar: {
            t: components["schemas"]["Timestamp"];
            /**
             * Format: double
             * @description Opening price.
             */
            o: number;
            /**
             * Format: double
             * @description High price.
             */
            h: number;
            /**
             * Format: double
             * @description Low price.
             */
            l: number;
            /**
             * Format: double
             * @description Closing price.
             */
            c: number;
            /**
             * Format: int64
             * @description Bar volume.
             */
            v: number;
            /**
             * Format: int64
             * @description Trade count in the bar.
             */
            n: number;
            /**
             * Format: double
             * @description Volume weighted average price.
             */
            vw: number;
        };
        OptionBarsResp: {
            bars: {
                [key: string]: components["schemas"]["OptionBar"][];
            };
            next_page_token: components["schemas"]["NextPageToken"];
            currency?: string;
        };
        /**
         * @default opra
         * @enum {string}
         */
        OptionFeed: "opra" | "indicative";
        OptionLatestQuotesResp: {
            quotes: {
                [key: string]: components["schemas"]["OptionQuote"];
            };
        };
        OptionLatestTradesResp: {
            trades: {
                [key: string]: components["schemas"]["OptionTrade"];
            };
        };
        OptionNextPageToken: components["schemas"]["NextPageToken"];
        /**
         * @description The best bid and ask information for a given option.
         *
         * @example {
         *       "t": "2024-02-28T15:30:28.046330624Z",
         *       "ax": "w",
         *       "ap": 0.16,
         *       "as": 669,
         *       "bx": "W",
         *       "bp": 0.15,
         *       "bs": 164,
         *       "c": "A"
         *     }
         */
        OptionQuote: {
            t: components["schemas"]["Timestamp"];
            /** @description Bid exchange. */
            bx: string;
            /**
             * Format: double
             * @description Bid price.
             */
            bp: number;
            /**
             * Format: uint32
             * @description Bid size.
             */
            bs: number;
            /** @description Ask exchange. */
            ax: string;
            /**
             * Format: double
             * @description Ask price.
             */
            ap: number;
            /**
             * Format: uint32
             * @description Ask size.
             */
            as: number;
            /** @description Quote condition. */
            c: string;
        };
        /** @description A snapshot provides the latest trade and latest quote. */
        OptionSnapshot: {
            dailyBar?: components["schemas"]["OptionBar"];
            /** @description The greeks for the contract calculated using the Black-Scholes model. */
            greeks?: {
                /** Format: double */
                delta: number;
                /** Format: double */
                gamma: number;
                /** Format: double */
                theta: number;
                /** Format: double */
                vega: number;
                /** Format: double */
                rho: number;
            };
            /**
             * Format: double
             * @description Implied volatility calculated using the Black-Scholes model.
             */
            impliedVolatility?: number;
            latestQuote?: components["schemas"]["OptionQuote"];
            latestTrade?: components["schemas"]["OptionTrade"];
            minuteBar?: components["schemas"]["OptionBar"];
            prevDailyBar?: components["schemas"]["OptionBar"];
        };
        OptionSnapshotsResp: {
            snapshots: {
                [key: string]: components["schemas"]["OptionSnapshot"];
            };
            next_page_token: components["schemas"]["NextPageToken"];
        };
        /**
         * @description An option trade.
         * @example {
         *       "t": "2024-01-18T15:03:44.56339456Z",
         *       "x": "B",
         *       "p": 0.37,
         *       "s": 1,
         *       "c": "I"
         *     }
         */
        OptionTrade: {
            t: components["schemas"]["Timestamp"];
            x: string;
            /**
             * Format: double
             * @description Trade price.
             */
            p: number;
            /**
             * Format: uint32
             * @description Trade size.
             */
            s: number;
            /** @description Trade condition. */
            c: string;
        };
        OptionTradesResp: {
            trades: {
                [key: string]: components["schemas"]["OptionTrade"][];
            };
            currency?: string;
            next_page_token: components["schemas"]["NextPageToken"];
        };
        /**
         * @description Market type (stocks or crypto).
         * @enum {string}
         */
        ScreenerMarketType: "stocks" | "crypto";
        /**
         * @description A stock that is most active by either volume or trade count.
         * @example {
         *       "symbol": "AAPL",
         *       "volume": 122709184,
         *       "trade_count": 639626
         *     }
         */
        ScreenerMostActive: {
            symbol: string;
            /**
             * Format: int64
             * @description Cumulative volume for the current trading day.
             */
            volume: number;
            /**
             * Format: int64
             * @description Cumulative trade count for the current trading day.
             */
            trade_count: number;
        };
        ScreenerMostActivesResp: {
            /** @description List of top N most active symbols. */
            most_actives: components["schemas"]["ScreenerMostActive"][];
            /** @description Time when the most actives were last computed. Formatted as a RFC-3339 date-time with nanosecond precision.
             *      */
            last_updated: string;
        };
        /**
         * Mover
         * @description A symbol whose price moved significantly.
         * @example {
         *       "symbol": "AGRI",
         *       "percent_change": 145.56,
         *       "change": 2.46,
         *       "price": 4.15
         *     }
         */
        ScreenerMover: {
            /** @description Symbol of market moving asset. */
            symbol: string;
            /**
             * Format: double
             * @description Percentage difference change for the day.
             */
            percent_change: number;
            /**
             * Format: double
             * @description Difference in change for the day.
             */
            change: number;
            /**
             * Format: double
             * @description Current price of market moving asset.
             */
            price: number;
        };
        /** @description Contains list of market movers. */
        ScreenerMoversResp: {
            /** @description List of top N gainers. */
            gainers: components["schemas"]["ScreenerMover"][];
            /** @description List of top N losers. */
            losers: components["schemas"]["ScreenerMover"][];
            market_type: components["schemas"]["ScreenerMarketType"];
            /** @description Time when the movers were last computed. Formatted as a RFC-3339 date-time with nanosecond precision.
             *      */
            last_updated: string;
        };
        /**
         * @description Sort data in ascending or descending order.
         * @default asc
         * @enum {string}
         */
        Sort: "asc" | "desc";
        /**
         * @default raw
         * @enum {string}
         */
        StockAdjustment: "raw" | "split" | "dividend" | "all";
        /**
         * @description An auction
         *
         * @example {
         *       "t": "2022-10-13T13:30:01.688Z",
         *       "x": "Q",
         *       "c": "O",
         *       "p": 135
         *     }
         */
        StockAuction: {
            t: components["schemas"]["Timestamp"];
            /** @description Exchange code. See `v2/stocks/meta/exchanges` for more details. */
            x: string;
            /**
             * Format: double
             * @description Auction price.
             */
            p: number;
            /**
             * Format: int64
             * @description Auction trade size.
             */
            s?: number;
            /** @description The condition flag indicating that this is an auction. See `v2/stocks/meta/conditions/trade` for more details.
             *      */
            c: string;
        };
        /** @default sip */
        StockAuctionFeed: string;
        StockAuctionsResp: {
            auctions: {
                [key: string]: components["schemas"]["StockDailyAuctions"][];
            };
            currency?: string;
            next_page_token: components["schemas"]["NextPageToken"];
        };
        StockAuctionsRespSingle: {
            symbol: string;
            auctions: components["schemas"]["StockDailyAuctions"][];
            currency?: string;
            next_page_token: components["schemas"]["NextPageToken"];
        };
        /**
         * @description OHLC aggregate of all the trades in a given interval.
         *
         * @example {
         *       "t": "2022-01-03T09:00:00Z",
         *       "o": 178.26,
         *       "h": 178.34,
         *       "l": 177.76,
         *       "c": 178.08,
         *       "v": 60937,
         *       "n": 1727,
         *       "vw": 177.954244
         *     }
         */
        StockBar: {
            t: components["schemas"]["Timestamp"];
            /**
             * Format: double
             * @description Opening price.
             */
            o: number;
            /**
             * Format: double
             * @description High price.
             */
            h: number;
            /**
             * Format: double
             * @description Low price.
             */
            l: number;
            /**
             * Format: double
             * @description Closing price.
             */
            c: number;
            /**
             * Format: int64
             * @description Bar volume.
             */
            v: number;
            /**
             * Format: int64
             * @description Trade count in the bar.
             */
            n: number;
            /**
             * Format: double
             * @description Volume weighted average price.
             */
            vw: number;
        };
        StockBarsResp: {
            bars: {
                [key: string]: components["schemas"]["StockBar"][];
            };
            next_page_token: components["schemas"]["NextPageToken"];
            currency?: string;
        };
        StockBarsRespSingle: {
            symbol: string;
            bars: components["schemas"]["StockBar"][];
            currency?: string;
            next_page_token: components["schemas"]["NextPageToken"];
        };
        /** @example {
         *       "@": "Regular Sale",
         *       "A": "Acquisition",
         *       "B": "Bunched Trade"
         *     } */
        StockConditions: {
            [key: string]: string;
        };
        /** @description Opening and closing auction prices for a given day.
         *      */
        StockDailyAuctions: {
            /**
             * Format: date
             * @description Date in RFC-3339.
             */
            d: string;
            /** @description Opening auctions. */
            o: components["schemas"]["StockAuction"][];
            /** @description Closing auctions. Every price / exchange / condition triplet is only shown once, with its earliest timestamp. */
            c: components["schemas"]["StockAuction"][];
        };
        /** @example {
         *       "N": "New York Stock Exchange",
         *       "V": "IEX"
         *     } */
        StockExchanges: {
            [key: string]: string;
        };
        /**
         * @default sip
         * @enum {string}
         */
        StockHistoricalFeed: "iex" | "otc" | "sip";
        StockLatestBarsResp: {
            bars: {
                [key: string]: components["schemas"]["StockBar"];
            };
            currency?: string;
        };
        StockLatestBarsRespSingle: {
            bar: components["schemas"]["StockBar"];
            symbol: string;
            currency?: string;
        };
        /** @enum {string} */
        StockLatestFeed: "iex" | "otc" | "sip" | "delayed_sip";
        StockLatestQuotesResp: {
            quotes: {
                [key: string]: components["schemas"]["StockQuote"];
            };
            currency?: string;
        };
        StockLatestQuotesRespSingle: {
            quote: components["schemas"]["StockQuote"];
            symbol: string;
            currency?: string;
        };
        StockLatestTradesResp: {
            trades: {
                [key: string]: components["schemas"]["StockTrade"];
            };
            currency?: string;
        };
        StockLatestTradesRespSingle: {
            trade: components["schemas"]["StockTrade"];
            symbol: string;
            currency?: string;
        };
        /**
         * @description The best bid and ask information for a given security.
         *
         * @example {
         *       "t": "2021-02-06T13:35:08.946977536Z",
         *       "ax": "C",
         *       "ap": 387.7,
         *       "as": 1,
         *       "bx": "N",
         *       "bp": 387.67,
         *       "bs": 1,
         *       "c": [
         *         "R"
         *       ],
         *       "z": "C"
         *     }
         */
        StockQuote: {
            t: components["schemas"]["Timestamp"];
            /** @description Bid exchange. See `v2/stocks/meta/exchanges` for more details. */
            bx: string;
            /**
             * Format: double
             * @description Bid price. 0 means the security has no active bid.
             */
            bp: number;
            /**
             * Format: uint32
             * @description Bid size.
             */
            bs: number;
            /** @description Ask exchange. See `v2/stocks/meta/exchanges` for more details. */
            ax: string;
            /**
             * Format: double
             * @description Ask price. 0 means the security has no active ask.
             */
            ap: number;
            /**
             * Format: uint32
             * @description Ask size.
             */
            as: number;
            /** @description Condition flags. See `v2/stocks/meta/conditions/quote` for more details. If the array contains one flag, it applies to both the bid and ask. If the array contains two flags, the first one applies to the bid and the second one to the ask.
             *      */
            c: string[];
            z: components["schemas"]["StockTape"];
        };
        StockQuotesResp: {
            quotes: {
                [key: string]: components["schemas"]["StockQuote"][];
            };
            currency?: string;
            next_page_token: components["schemas"]["NextPageToken"];
        };
        StockQuotesRespSingle: {
            symbol: string;
            quotes: components["schemas"]["StockQuote"][];
            currency?: string;
            next_page_token: components["schemas"]["NextPageToken"];
        };
        /** @description A snapshot provides the latest trade, latest quote, latest minute bar, current daily bar and previous daily bar.
         *      */
        StockSnapshot: {
            dailyBar?: components["schemas"]["StockBar"];
            latestQuote?: components["schemas"]["StockQuote"];
            latestTrade?: components["schemas"]["StockTrade"];
            minuteBar?: components["schemas"]["StockBar"];
            prevDailyBar?: components["schemas"]["StockBar"];
        };
        StockSnapshotsResp: {
            [key: string]: components["schemas"]["StockSnapshot"];
        };
        StockSnapshotsRespSingle: {
            symbol?: string;
            currency?: string;
        } & components["schemas"]["StockSnapshot"];
        /**
         * @description Tape A is the New York Stock Exchange, Tape B is NYSE Arca, Bats, IEX and other regional exchanges, Tape C is NASDAQ, Tape O is OTC.
         *
         * @enum {string}
         */
        StockTape: "A" | "B" | "C" | "O";
        /**
         * @description A stock trade.
         * @example {
         *       "t": "2022-01-03T09:00:00.086175744Z",
         *       "x": "P",
         *       "p": 178.26,
         *       "s": 246,
         *       "c": [
         *         "@",
         *         "T"
         *       ],
         *       "i": 1,
         *       "z": "C"
         *     }
         */
        StockTrade: {
            t: components["schemas"]["Timestamp"];
            /** @description Exchange code. See `v2/stocks/meta/exchanges` for more details. */
            x: string;
            /**
             * Format: double
             * @description Trade price.
             */
            p: number;
            /**
             * Format: uint32
             * @description Trade size.
             */
            s: number;
            /**
             * Format: uint64
             * @description Trade ID sent by the exchange.
             */
            i: number;
            /** @description Condition flags. See `v2/stocks/meta/conditions/trade` for more details. */
            c: string[];
            z: components["schemas"]["StockTape"];
            /** @description Update to the trade. This field is optional, if it's missing, the trade is valid. Otherwise, it can have these values:
             *      - canceled: indicates that the trade has been canceled
             *      - incorrect: indicates that the trade has been corrected and the given trade is no longer valid
             *      - corrected: indicates that this trade is the correction of a previous (incorrect) trade
             *      */
            u?: string;
        };
        StockTradesResp: {
            trades: {
                [key: string]: components["schemas"]["StockTrade"][];
            };
            currency?: string;
            next_page_token: components["schemas"]["NextPageToken"];
        };
        StockTradesRespSingle: {
            symbol: string;
            trades: components["schemas"]["StockTrade"][];
            next_page_token: components["schemas"]["NextPageToken"];
            currency?: string;
        };
        /**
         * Format: date-time
         * @description Timestamp in RFC-3339 format with nanosecond precision.
         */
        Timestamp: string;
    };
    responses: {
        /** @description One of the request parameters is invalid. See the returned message for details. */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Authentication headers are missing or invalid. */
        403: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description The requested object was not found. */
        404: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Too many requests. */
        429: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: {
        /** @description Specifies the corporate action adjustment for the stocks. */
        Adjustment: components["schemas"]["StockAdjustment"];
        /** @description The as-of date of the queried stock symbol(s). Format: YYYY-MM-DD. Default: current day.
         *
         *     This date is used to identify the underlying entity of the provided symbol(s), so that name changes for this entity can be found. Data for past symbol(s) is returned if the query date range spans the name change.
         *
         *     The special value of "-" means symbol mapping is skipped. Data is returned based on the symbol alone without looking up previous names. The same happens if the queried symbol is not found on the given `asof` date.
         *
         *     Example: FB was renamed to META in 2022-06-09. Querying META with an `asof` date after 2022-06-09 will also yield FB data. The data for the FB ticker will be labeled as META because they are considered the same underlying entity as of 2022-06-09. Querying FB with an `asof` date after 2022-06-09 will only return data with the FB ticker, not with META. But with an `asof` date before 2022-06-09, META will also be returned (as FB).
         *      */
        AsOf: string;
        /** @description Crypto location. */
        CryptoLoc: components["schemas"]["CryptoLoc"];
        /** @description Crypto perpetual location. */
        CryptoPerpLoc: "global";
        /**
         * @description A comma-separated list of crypto symbols.
         * @example BTC-PERP,LTC-PERP
         */
        CryptoPerpSymbols: string;
        /**
         * @description A comma-separated list of crypto symbols.
         * @example BTC/USD,LTC/USD
         */
        CryptoSymbols: string;
        /** @description The currency of all prices in ISO 4217 format. Default: USD.
         *      */
        Currency: string;
        CurrencyPairs: components["schemas"]["ForexCurrencyPairs"];
        /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
         *     Default: the current time.
         *      */
        End: string;
        /** @description The maximum number of data points to return in the response page.
         *     The API may return less, even if there are more available data points in the requested interval.
         *     Always check the `next_page_token` for more pages.
         *     The limit applies to the total number of data points, not per symbol!
         *      */
        Limit: number;
        /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
         *     Default: the current time if the user has `opra` access, otherwise 15 minutes before the current time.
         *      */
        OptionEnd: string;
        /** @description The source feed of the data. `opra` is the official OPRA feed, `indicative` is a free indicative feed where trades are delayed and quotes are modified. Default: `opra` if the user has a subscription, otherwise `indicative`.
         *      */
        OptionFeed: components["schemas"]["OptionFeed"];
        /** @description Number of maximum snapshots to return in a response.
         *     The limit applies to the total number of data points, not the number per symbol!
         *     Use `next_page_token` to fetch the next set of responses.
         *      */
        OptionSnapshotLimit: number;
        /** @description Filter to snapshots that were updated since this timestamp, meaning that the timestamp of the trade or the quote is greater than or equal to this value.
         *     Format: RFC-3339 or YYYY-MM-DD. If missing, all values are returned.
         *      */
        OptionUpdatedSince: string;
        /**
         * @description A comma-separated list of contract symbols with a limit of 100.
         * @example AAPL241220C00300000,AAPL240315C00225000
         */
        OptionSymbols: string;
        /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
         *      */
        PageToken: string;
        /** @description Sort data in ascending or descending order. */
        Sort: components["schemas"]["Sort"];
        /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
         *     Default: the beginning of the current day.
         *      */
        Start: string;
        /** @description Only `sip` is valid for auctions. */
        StockAuctionFeed: components["schemas"]["StockAuctionFeed"];
        /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
         *     Default: current time if `feed` is not `sip` or if the user has a subscription, otherwise 15 minutes before the current time.
         *      */
        StockEnd: string;
        /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. Default: `sip`.
         *      */
        StockHistoricalFeed: components["schemas"]["StockHistoricalFeed"];
        /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. `delayed_sip` is SIP data with a 15 minute delay. Default: `sip` if the user has the unlimited subscription, otherwise `iex`.
         *      */
        StockLatestFeed: components["schemas"]["StockLatestFeed"];
        /**
         * @description The symbol to query.
         * @example AAPL
         */
        StockSymbol: string;
        /**
         * @description A comma-separated list of stock symbols.
         * @example AAPL,TSLA
         */
        StockSymbols: string;
        /**
         * @description The timeframe represented by each bar in aggregation.
         *     You can use any of the following values:
         *      - `[1-59]Min` or `[1-59]T`, e.g. `5Min` or `5T` creates 5-minute aggregations
         *      - `[1-23]Hour` or `[1-23]H`, e.g. `12Hour` or `12H` creates 12-hour aggregations
         *      - `1Day` or `1D` creates 1-day aggregations
         *      - `1Week` or `1W` creates 1-week aggregations
         *      - `[1,2,3,4,6,12]Month` or `[1,2,3,4,6,12]M`, e.g. `3Month` or `3M` creates 3-month aggregations
         *
         * @example 1Min
         */
        Timeframe: string;
        /**
         * @description The financial instrument on which an option contract is based or derived.
         * @example AAPL
         */
        UnderlyingSymbol: string;
    };
    requestBodies: never;
    headers: {
        /**
         * @description Request limit per minute.
         * @example 100
         */
        "X-RateLimit-Limit": number;
        /**
         * @description Request limit per minute remaining.
         * @example 90
         */
        "X-RateLimit-Remaining": number;
        /**
         * @description The UNIX epoch when the remaining quota changes.
         * @example 1674044551
         */
        "X-RateLimit-Reset": number;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    CorporateActions: {
        parameters: {
            query?: {
                /**
                 * @description A comma-separated list of symbols.
                 * @example AAPL,TSLA
                 */
                symbols?: string;
                /**
                 * @description A comma-separated list of types. If not provided, search all types.
                 *
                 *     The following types are supported:
                 *       - reverse_split
                 *       - forward_split
                 *       - unit_split
                 *       - cash_dividend
                 *       - stock_dividend
                 *       - spin_off
                 *       - cash_merger
                 *       - stock_merger
                 *       - stock_and_cash_merger
                 *       - redemption
                 *       - name_change
                 *       - worthless_removal
                 *       - rights_distribution
                 *
                 * @example forward_split,reverse_split
                 */
                types?: string;
                /** @description The inclusive start of the interval. Format: YYYY-MM-DD. Default: current day.
                 *      */
                start?: string;
                /** @description The inclusive end of the interval. Format: YYYY-MM-DD. Default: current day.
                 *      */
                end?: string;
                /** @description Maximum number of corporate actions to return in a response.
                 *     The limit applies to the total number of data points, not the count per symbol!
                 *     Use `next_page_token` to fetch the next set of corporate actions.
                 *      */
                limit?: number;
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CACorporateActionsResp"];
                };
            };
        };
    };
    LatestRates: {
        parameters: {
            query: {
                currency_pairs: components["parameters"]["CurrencyPairs"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForexLatestRatesResp"];
                };
            };
        };
    };
    Rates: {
        parameters: {
            query: {
                currency_pairs: components["parameters"]["CurrencyPairs"];
                timeframe?: string;
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the current time.
                 *      */
                end?: components["parameters"]["End"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForexRatesResp"];
                };
            };
        };
    };
    Logos: {
        parameters: {
            query?: {
                placeholder?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description A unique series of letters assigned to a security for trading purposes.
                 * @example AAPL
                 */
                symbol: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "image/png": string;
                };
            };
        };
    };
    News: {
        parameters: {
            query?: {
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the current time.
                 *      */
                end?: components["parameters"]["End"];
                /** @description Sort articles by updated date. */
                sort?: "asc" | "desc";
                /** @description A comma-separated list of symbols for which to query news. */
                symbols?: string;
                /**
                 * @description Limit of news items to be returned for a result page.
                 * @example 10
                 */
                limit?: number;
                /** @description Boolean indicator to include content for news articles (if available). */
                include_content?: boolean;
                /** @description Boolean indicator to exclude news articles that do not contain content. */
                exclude_contentless?: boolean;
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsResp"];
                };
            };
        };
    };
    optionBars: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of contract symbols with a limit of 100.
                 * @example AAPL241220C00300000,AAPL240315C00225000
                 */
                symbols: components["parameters"]["OptionSymbols"];
                /**
                 * @description The timeframe represented by each bar in aggregation.
                 *     You can use any of the following values:
                 *      - `[1-59]Min` or `[1-59]T`, e.g. `5Min` or `5T` creates 5-minute aggregations
                 *      - `[1-23]Hour` or `[1-23]H`, e.g. `12Hour` or `12H` creates 12-hour aggregations
                 *      - `1Day` or `1D` creates 1-day aggregations
                 *      - `1Week` or `1W` creates 1-week aggregations
                 *      - `[1,2,3,4,6,12]Month` or `[1,2,3,4,6,12]M`, e.g. `3Month` or `3M` creates 3-month aggregations
                 *
                 * @example 1Min
                 */
                timeframe: components["parameters"]["Timeframe"];
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the current time if the user has `opra` access, otherwise 15 minutes before the current time.
                 *      */
                end?: components["parameters"]["OptionEnd"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OptionBarsResp"];
                };
            };
        };
    };
    OptionMetaConditions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of ticks. */
                ticktype: "trade" | "quote";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    OptionMetaExchanges: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    OptionLatestQuotes: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of contract symbols with a limit of 100.
                 * @example AAPL241220C00300000,AAPL240315C00225000
                 */
                symbols: components["parameters"]["OptionSymbols"];
                /** @description The source feed of the data. `opra` is the official OPRA feed, `indicative` is a free indicative feed where trades are delayed and quotes are modified. Default: `opra` if the user has a subscription, otherwise `indicative`.
                 *      */
                feed?: components["parameters"]["OptionFeed"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OptionLatestQuotesResp"];
                };
            };
        };
    };
    OptionSnapshots: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of contract symbols with a limit of 100.
                 * @example AAPL241220C00300000,AAPL240315C00225000
                 */
                symbols: components["parameters"]["OptionSymbols"];
                /** @description The source feed of the data. `opra` is the official OPRA feed, `indicative` is a free indicative feed where trades are delayed and quotes are modified. Default: `opra` if the user has a subscription, otherwise `indicative`.
                 *      */
                feed?: components["parameters"]["OptionFeed"];
                /** @description Filter to snapshots that were updated since this timestamp, meaning that the timestamp of the trade or the quote is greater than or equal to this value.
                 *     Format: RFC-3339 or YYYY-MM-DD. If missing, all values are returned.
                 *      */
                updated_since?: components["parameters"]["OptionUpdatedSince"];
                /** @description Number of maximum snapshots to return in a response.
                 *     The limit applies to the total number of data points, not the number per symbol!
                 *     Use `next_page_token` to fetch the next set of responses.
                 *      */
                limit?: components["parameters"]["OptionSnapshotLimit"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OptionSnapshotsResp"];
                };
            };
        };
    };
    OptionChain: {
        parameters: {
            query?: {
                /** @description The source feed of the data. `opra` is the official OPRA feed, `indicative` is a free indicative feed where trades are delayed and quotes are modified. Default: `opra` if the user has a subscription, otherwise `indicative`.
                 *      */
                feed?: components["parameters"]["OptionFeed"];
                /** @description Number of maximum snapshots to return in a response.
                 *     The limit applies to the total number of data points, not the number per symbol!
                 *     Use `next_page_token` to fetch the next set of responses.
                 *      */
                limit?: components["parameters"]["OptionSnapshotLimit"];
                /** @description Filter to snapshots that were updated since this timestamp, meaning that the timestamp of the trade or the quote is greater than or equal to this value.
                 *     Format: RFC-3339 or YYYY-MM-DD. If missing, all values are returned.
                 *      */
                updated_since?: components["parameters"]["OptionUpdatedSince"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Filter contracts by the type (call or put). */
                type?: "call" | "put";
                /** @description Filter contracts with strike price greater than or equal to the specified value. */
                strike_price_gte?: number;
                /** @description Filter contracts with strike price less than or equal to the specified value. */
                strike_price_lte?: number;
                /** @description Filter contracts by the exact expiration date (format: YYYY-MM-DD). */
                expiration_date?: string;
                /** @description Filter contracts with expiration date greater than or equal to the specified date. */
                expiration_date_gte?: string;
                /** @description Filter contracts with expiration date less than or equal to the specified date. */
                expiration_date_lte?: string;
                /**
                 * @description Filter contracts by the root symbol.
                 * @example AAPL1
                 */
                root_symbol?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The financial instrument on which an option contract is based or derived.
                 * @example AAPL
                 */
                underlying_symbol: components["parameters"]["UnderlyingSymbol"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OptionSnapshotsResp"];
                };
            };
        };
    };
    OptionTrades: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of contract symbols with a limit of 100.
                 * @example AAPL241220C00300000,AAPL240315C00225000
                 */
                symbols: components["parameters"]["OptionSymbols"];
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the current time if the user has `opra` access, otherwise 15 minutes before the current time.
                 *      */
                end?: components["parameters"]["OptionEnd"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OptionTradesResp"];
                };
            };
        };
    };
    OptionLatestTrades: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of contract symbols with a limit of 100.
                 * @example AAPL241220C00300000,AAPL240315C00225000
                 */
                symbols: components["parameters"]["OptionSymbols"];
                /** @description The source feed of the data. `opra` is the official OPRA feed, `indicative` is a free indicative feed where trades are delayed and quotes are modified. Default: `opra` if the user has a subscription, otherwise `indicative`.
                 *      */
                feed?: components["parameters"]["OptionFeed"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OptionLatestTradesResp"];
                };
            };
        };
    };
    MostActives: {
        parameters: {
            query?: {
                /** @description The metric used for ranking the most active stocks. */
                by?: "volume" | "trades";
                /** @description The number of top most active stocks to fetch per day. */
                top?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScreenerMostActivesResp"];
                };
            };
        };
    };
    Movers: {
        parameters: {
            query?: {
                /** @description Number of top market movers to fetch (gainers and losers). Will return this number of results for each. By default 10 gainers and 10 losers.
                 *      */
                top?: number;
            };
            header?: never;
            path: {
                /** @description Screen-specific market (stocks or crypto). */
                market_type: components["schemas"]["ScreenerMarketType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScreenerMoversResp"];
                };
            };
        };
    };
    CryptoPerpLatestBars: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC-PERP,LTC-PERP
                 */
                symbols: components["parameters"]["CryptoPerpSymbols"];
            };
            header?: never;
            path: {
                /** @description Crypto perpetual location. */
                loc: components["parameters"]["CryptoPerpLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoLatestBarsResp"];
                };
            };
        };
    };
    CryptoPerpLatestOrderbooks: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC-PERP,LTC-PERP
                 */
                symbols: components["parameters"]["CryptoPerpSymbols"];
            };
            header?: never;
            path: {
                /** @description Crypto perpetual location. */
                loc: components["parameters"]["CryptoPerpLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoLatestOrderbooksResp"];
                };
            };
        };
    };
    CryptoPerpLatestQuotes: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC-PERP,LTC-PERP
                 */
                symbols: components["parameters"]["CryptoPerpSymbols"];
            };
            header?: never;
            path: {
                /** @description Crypto perpetual location. */
                loc: components["parameters"]["CryptoPerpLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoLatestQuotesResp"];
                };
            };
        };
    };
    CryptoPerpLatestTrades: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC-PERP,LTC-PERP
                 */
                symbols: components["parameters"]["CryptoPerpSymbols"];
            };
            header?: never;
            path: {
                /** @description Crypto perpetual location. */
                loc: components["parameters"]["CryptoPerpLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoLatestTradesResp"];
                };
            };
        };
    };
    CryptoBars: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC/USD,LTC/USD
                 */
                symbols: components["parameters"]["CryptoSymbols"];
                /**
                 * @description The timeframe represented by each bar in aggregation.
                 *     You can use any of the following values:
                 *      - `[1-59]Min` or `[1-59]T`, e.g. `5Min` or `5T` creates 5-minute aggregations
                 *      - `[1-23]Hour` or `[1-23]H`, e.g. `12Hour` or `12H` creates 12-hour aggregations
                 *      - `1Day` or `1D` creates 1-day aggregations
                 *      - `1Week` or `1W` creates 1-week aggregations
                 *      - `[1,2,3,4,6,12]Month` or `[1,2,3,4,6,12]M`, e.g. `3Month` or `3M` creates 3-month aggregations
                 *
                 * @example 1Min
                 */
                timeframe: components["parameters"]["Timeframe"];
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the current time.
                 *      */
                end?: components["parameters"]["End"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path: {
                /** @description Crypto location. */
                loc: components["parameters"]["CryptoLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoBarsResp"];
                };
            };
        };
    };
    CryptoLatestBars: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC/USD,LTC/USD
                 */
                symbols: components["parameters"]["CryptoSymbols"];
            };
            header?: never;
            path: {
                /** @description Crypto location. */
                loc: components["parameters"]["CryptoLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoLatestBarsResp"];
                };
            };
        };
    };
    CryptoLatestOrderbooks: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC/USD,LTC/USD
                 */
                symbols: components["parameters"]["CryptoSymbols"];
            };
            header?: never;
            path: {
                /** @description Crypto location. */
                loc: components["parameters"]["CryptoLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoLatestOrderbooksResp"];
                };
            };
        };
    };
    CryptoLatestQuotes: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC/USD,LTC/USD
                 */
                symbols: components["parameters"]["CryptoSymbols"];
            };
            header?: never;
            path: {
                /** @description Crypto location. */
                loc: components["parameters"]["CryptoLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoLatestQuotesResp"];
                };
            };
        };
    };
    CryptoLatestTrades: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC/USD,LTC/USD
                 */
                symbols: components["parameters"]["CryptoSymbols"];
            };
            header?: never;
            path: {
                /** @description Crypto location. */
                loc: components["parameters"]["CryptoLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoLatestTradesResp"];
                };
            };
        };
    };
    CryptoQuotes: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC/USD,LTC/USD
                 */
                symbols: components["parameters"]["CryptoSymbols"];
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the current time.
                 *      */
                end?: components["parameters"]["End"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path: {
                /** @description Crypto location. */
                loc: components["parameters"]["CryptoLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoQuotesResp"];
                };
            };
        };
    };
    CryptoSnapshots: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC/USD,LTC/USD
                 */
                symbols: components["parameters"]["CryptoSymbols"];
            };
            header?: never;
            path: {
                /** @description Crypto location. */
                loc: components["parameters"]["CryptoLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoSnapshotsResp"];
                };
            };
        };
    };
    CryptoTrades: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of crypto symbols.
                 * @example BTC/USD,LTC/USD
                 */
                symbols: components["parameters"]["CryptoSymbols"];
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the current time.
                 *      */
                end?: components["parameters"]["End"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path: {
                /** @description Crypto location. */
                loc: components["parameters"]["CryptoLoc"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoTradesResp"];
                };
            };
        };
    };
    StockAuctions: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of stock symbols.
                 * @example AAPL,TSLA
                 */
                symbols: components["parameters"]["StockSymbols"];
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: current time if `feed` is not `sip` or if the user has a subscription, otherwise 15 minutes before the current time.
                 *      */
                end?: components["parameters"]["StockEnd"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description The as-of date of the queried stock symbol(s). Format: YYYY-MM-DD. Default: current day.
                 *
                 *     This date is used to identify the underlying entity of the provided symbol(s), so that name changes for this entity can be found. Data for past symbol(s) is returned if the query date range spans the name change.
                 *
                 *     The special value of "-" means symbol mapping is skipped. Data is returned based on the symbol alone without looking up previous names. The same happens if the queried symbol is not found on the given `asof` date.
                 *
                 *     Example: FB was renamed to META in 2022-06-09. Querying META with an `asof` date after 2022-06-09 will also yield FB data. The data for the FB ticker will be labeled as META because they are considered the same underlying entity as of 2022-06-09. Querying FB with an `asof` date after 2022-06-09 will only return data with the FB ticker, not with META. But with an `asof` date before 2022-06-09, META will also be returned (as FB).
                 *      */
                asof?: components["parameters"]["AsOf"];
                /** @description Only `sip` is valid for auctions. */
                feed?: components["parameters"]["StockAuctionFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockAuctionsResp"];
                };
            };
        };
    };
    StockBars: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of stock symbols.
                 * @example AAPL,TSLA
                 */
                symbols: components["parameters"]["StockSymbols"];
                /**
                 * @description The timeframe represented by each bar in aggregation.
                 *     You can use any of the following values:
                 *      - `[1-59]Min` or `[1-59]T`, e.g. `5Min` or `5T` creates 5-minute aggregations
                 *      - `[1-23]Hour` or `[1-23]H`, e.g. `12Hour` or `12H` creates 12-hour aggregations
                 *      - `1Day` or `1D` creates 1-day aggregations
                 *      - `1Week` or `1W` creates 1-week aggregations
                 *      - `[1,2,3,4,6,12]Month` or `[1,2,3,4,6,12]M`, e.g. `3Month` or `3M` creates 3-month aggregations
                 *
                 * @example 1Min
                 */
                timeframe: components["parameters"]["Timeframe"];
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: current time if `feed` is not `sip` or if the user has a subscription, otherwise 15 minutes before the current time.
                 *      */
                end?: components["parameters"]["StockEnd"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description Specifies the corporate action adjustment for the stocks. */
                adjustment?: components["parameters"]["Adjustment"];
                /** @description The as-of date of the queried stock symbol(s). Format: YYYY-MM-DD. Default: current day.
                 *
                 *     This date is used to identify the underlying entity of the provided symbol(s), so that name changes for this entity can be found. Data for past symbol(s) is returned if the query date range spans the name change.
                 *
                 *     The special value of "-" means symbol mapping is skipped. Data is returned based on the symbol alone without looking up previous names. The same happens if the queried symbol is not found on the given `asof` date.
                 *
                 *     Example: FB was renamed to META in 2022-06-09. Querying META with an `asof` date after 2022-06-09 will also yield FB data. The data for the FB ticker will be labeled as META because they are considered the same underlying entity as of 2022-06-09. Querying FB with an `asof` date after 2022-06-09 will only return data with the FB ticker, not with META. But with an `asof` date before 2022-06-09, META will also be returned (as FB).
                 *      */
                asof?: components["parameters"]["AsOf"];
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. Default: `sip`.
                 *      */
                feed?: components["parameters"]["StockHistoricalFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockBarsResp"];
                };
            };
        };
    };
    StockLatestBars: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of stock symbols.
                 * @example AAPL,TSLA
                 */
                symbols: components["parameters"]["StockSymbols"];
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. `delayed_sip` is SIP data with a 15 minute delay. Default: `sip` if the user has the unlimited subscription, otherwise `iex`.
                 *      */
                feed?: components["parameters"]["StockLatestFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockLatestBarsResp"];
                };
            };
        };
    };
    StockMetaConditions: {
        parameters: {
            query: {
                /** @description The one character name of the tape. */
                tape: "A" | "B" | "C";
            };
            header?: never;
            path: {
                /** @description The type of ticks. */
                ticktype: "trade" | "quote";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockConditions"];
                };
            };
        };
    };
    StockMetaExchanges: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockExchanges"];
                };
            };
        };
    };
    StockQuotes: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of stock symbols.
                 * @example AAPL,TSLA
                 */
                symbols: components["parameters"]["StockSymbols"];
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: current time if `feed` is not `sip` or if the user has a subscription, otherwise 15 minutes before the current time.
                 *      */
                end?: components["parameters"]["StockEnd"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description The as-of date of the queried stock symbol(s). Format: YYYY-MM-DD. Default: current day.
                 *
                 *     This date is used to identify the underlying entity of the provided symbol(s), so that name changes for this entity can be found. Data for past symbol(s) is returned if the query date range spans the name change.
                 *
                 *     The special value of "-" means symbol mapping is skipped. Data is returned based on the symbol alone without looking up previous names. The same happens if the queried symbol is not found on the given `asof` date.
                 *
                 *     Example: FB was renamed to META in 2022-06-09. Querying META with an `asof` date after 2022-06-09 will also yield FB data. The data for the FB ticker will be labeled as META because they are considered the same underlying entity as of 2022-06-09. Querying FB with an `asof` date after 2022-06-09 will only return data with the FB ticker, not with META. But with an `asof` date before 2022-06-09, META will also be returned (as FB).
                 *      */
                asof?: components["parameters"]["AsOf"];
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. Default: `sip`.
                 *      */
                feed?: components["parameters"]["StockHistoricalFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockQuotesResp"];
                };
            };
        };
    };
    StockLatestQuotes: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of stock symbols.
                 * @example AAPL,TSLA
                 */
                symbols: components["parameters"]["StockSymbols"];
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. `delayed_sip` is SIP data with a 15 minute delay. Default: `sip` if the user has the unlimited subscription, otherwise `iex`.
                 *      */
                feed?: components["parameters"]["StockLatestFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockLatestQuotesResp"];
                };
            };
        };
    };
    StockSnapshots: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of stock symbols.
                 * @example AAPL,TSLA
                 */
                symbols: components["parameters"]["StockSymbols"];
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. `delayed_sip` is SIP data with a 15 minute delay. Default: `sip` if the user has the unlimited subscription, otherwise `iex`.
                 *      */
                feed?: components["parameters"]["StockLatestFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockSnapshotsResp"];
                };
            };
        };
    };
    StockTrades: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of stock symbols.
                 * @example AAPL,TSLA
                 */
                symbols: components["parameters"]["StockSymbols"];
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: current time if `feed` is not `sip` or if the user has a subscription, otherwise 15 minutes before the current time.
                 *      */
                end?: components["parameters"]["StockEnd"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description The as-of date of the queried stock symbol(s). Format: YYYY-MM-DD. Default: current day.
                 *
                 *     This date is used to identify the underlying entity of the provided symbol(s), so that name changes for this entity can be found. Data for past symbol(s) is returned if the query date range spans the name change.
                 *
                 *     The special value of "-" means symbol mapping is skipped. Data is returned based on the symbol alone without looking up previous names. The same happens if the queried symbol is not found on the given `asof` date.
                 *
                 *     Example: FB was renamed to META in 2022-06-09. Querying META with an `asof` date after 2022-06-09 will also yield FB data. The data for the FB ticker will be labeled as META because they are considered the same underlying entity as of 2022-06-09. Querying FB with an `asof` date after 2022-06-09 will only return data with the FB ticker, not with META. But with an `asof` date before 2022-06-09, META will also be returned (as FB).
                 *      */
                asof?: components["parameters"]["AsOf"];
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. Default: `sip`.
                 *      */
                feed?: components["parameters"]["StockHistoricalFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTradesResp"];
                };
            };
        };
    };
    StockLatestTrades: {
        parameters: {
            query: {
                /**
                 * @description A comma-separated list of stock symbols.
                 * @example AAPL,TSLA
                 */
                symbols: components["parameters"]["StockSymbols"];
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. `delayed_sip` is SIP data with a 15 minute delay. Default: `sip` if the user has the unlimited subscription, otherwise `iex`.
                 *      */
                feed?: components["parameters"]["StockLatestFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockLatestTradesResp"];
                };
            };
        };
    };
    StockAuctionSingle: {
        parameters: {
            query?: {
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: current time if `feed` is not `sip` or if the user has a subscription, otherwise 15 minutes before the current time.
                 *      */
                end?: components["parameters"]["StockEnd"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description The as-of date of the queried stock symbol(s). Format: YYYY-MM-DD. Default: current day.
                 *
                 *     This date is used to identify the underlying entity of the provided symbol(s), so that name changes for this entity can be found. Data for past symbol(s) is returned if the query date range spans the name change.
                 *
                 *     The special value of "-" means symbol mapping is skipped. Data is returned based on the symbol alone without looking up previous names. The same happens if the queried symbol is not found on the given `asof` date.
                 *
                 *     Example: FB was renamed to META in 2022-06-09. Querying META with an `asof` date after 2022-06-09 will also yield FB data. The data for the FB ticker will be labeled as META because they are considered the same underlying entity as of 2022-06-09. Querying FB with an `asof` date after 2022-06-09 will only return data with the FB ticker, not with META. But with an `asof` date before 2022-06-09, META will also be returned (as FB).
                 *      */
                asof?: components["parameters"]["AsOf"];
                /** @description Only `sip` is valid for auctions. */
                feed?: components["parameters"]["StockAuctionFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path: {
                /**
                 * @description The symbol to query.
                 * @example AAPL
                 */
                symbol: components["parameters"]["StockSymbol"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockAuctionsRespSingle"];
                };
            };
        };
    };
    StockBarSingle: {
        parameters: {
            query: {
                /**
                 * @description The timeframe represented by each bar in aggregation.
                 *     You can use any of the following values:
                 *      - `[1-59]Min` or `[1-59]T`, e.g. `5Min` or `5T` creates 5-minute aggregations
                 *      - `[1-23]Hour` or `[1-23]H`, e.g. `12Hour` or `12H` creates 12-hour aggregations
                 *      - `1Day` or `1D` creates 1-day aggregations
                 *      - `1Week` or `1W` creates 1-week aggregations
                 *      - `[1,2,3,4,6,12]Month` or `[1,2,3,4,6,12]M`, e.g. `3Month` or `3M` creates 3-month aggregations
                 *
                 * @example 1Min
                 */
                timeframe: components["parameters"]["Timeframe"];
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: current time if `feed` is not `sip` or if the user has a subscription, otherwise 15 minutes before the current time.
                 *      */
                end?: components["parameters"]["StockEnd"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description Specifies the corporate action adjustment for the stocks. */
                adjustment?: components["parameters"]["Adjustment"];
                /** @description The as-of date of the queried stock symbol(s). Format: YYYY-MM-DD. Default: current day.
                 *
                 *     This date is used to identify the underlying entity of the provided symbol(s), so that name changes for this entity can be found. Data for past symbol(s) is returned if the query date range spans the name change.
                 *
                 *     The special value of "-" means symbol mapping is skipped. Data is returned based on the symbol alone without looking up previous names. The same happens if the queried symbol is not found on the given `asof` date.
                 *
                 *     Example: FB was renamed to META in 2022-06-09. Querying META with an `asof` date after 2022-06-09 will also yield FB data. The data for the FB ticker will be labeled as META because they are considered the same underlying entity as of 2022-06-09. Querying FB with an `asof` date after 2022-06-09 will only return data with the FB ticker, not with META. But with an `asof` date before 2022-06-09, META will also be returned (as FB).
                 *      */
                asof?: components["parameters"]["AsOf"];
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. Default: `sip`.
                 *      */
                feed?: components["parameters"]["StockHistoricalFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path: {
                /**
                 * @description The symbol to query.
                 * @example AAPL
                 */
                symbol: components["parameters"]["StockSymbol"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockBarsRespSingle"];
                };
            };
        };
    };
    StockLatestBarSingle: {
        parameters: {
            query?: {
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. `delayed_sip` is SIP data with a 15 minute delay. Default: `sip` if the user has the unlimited subscription, otherwise `iex`.
                 *      */
                feed?: components["parameters"]["StockLatestFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
            };
            header?: never;
            path: {
                /**
                 * @description The symbol to query.
                 * @example AAPL
                 */
                symbol: components["parameters"]["StockSymbol"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockLatestBarsRespSingle"];
                };
            };
        };
    };
    StockQuoteSingle: {
        parameters: {
            query?: {
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: current time if `feed` is not `sip` or if the user has a subscription, otherwise 15 minutes before the current time.
                 *      */
                end?: components["parameters"]["StockEnd"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description The as-of date of the queried stock symbol(s). Format: YYYY-MM-DD. Default: current day.
                 *
                 *     This date is used to identify the underlying entity of the provided symbol(s), so that name changes for this entity can be found. Data for past symbol(s) is returned if the query date range spans the name change.
                 *
                 *     The special value of "-" means symbol mapping is skipped. Data is returned based on the symbol alone without looking up previous names. The same happens if the queried symbol is not found on the given `asof` date.
                 *
                 *     Example: FB was renamed to META in 2022-06-09. Querying META with an `asof` date after 2022-06-09 will also yield FB data. The data for the FB ticker will be labeled as META because they are considered the same underlying entity as of 2022-06-09. Querying FB with an `asof` date after 2022-06-09 will only return data with the FB ticker, not with META. But with an `asof` date before 2022-06-09, META will also be returned (as FB).
                 *      */
                asof?: components["parameters"]["AsOf"];
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. Default: `sip`.
                 *      */
                feed?: components["parameters"]["StockHistoricalFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path: {
                /**
                 * @description The symbol to query.
                 * @example AAPL
                 */
                symbol: components["parameters"]["StockSymbol"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockQuotesRespSingle"];
                };
            };
        };
    };
    StockLatestQuoteSingle: {
        parameters: {
            query?: {
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. `delayed_sip` is SIP data with a 15 minute delay. Default: `sip` if the user has the unlimited subscription, otherwise `iex`.
                 *      */
                feed?: components["parameters"]["StockLatestFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
            };
            header?: never;
            path: {
                /**
                 * @description The symbol to query.
                 * @example AAPL
                 */
                symbol: components["parameters"]["StockSymbol"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockLatestQuotesRespSingle"];
                };
            };
        };
    };
    StockSnapshotSingle: {
        parameters: {
            query?: {
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. `delayed_sip` is SIP data with a 15 minute delay. Default: `sip` if the user has the unlimited subscription, otherwise `iex`.
                 *      */
                feed?: components["parameters"]["StockLatestFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
            };
            header?: never;
            path: {
                /**
                 * @description The symbol to query.
                 * @example AAPL
                 */
                symbol: components["parameters"]["StockSymbol"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockSnapshotsRespSingle"];
                };
            };
        };
    };
    StockTradeSingle: {
        parameters: {
            query?: {
                /** @description The inclusive start of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: the beginning of the current day.
                 *      */
                start?: components["parameters"]["Start"];
                /** @description The inclusive end of the interval. Format: RFC-3339 or YYYY-MM-DD.
                 *     Default: current time if `feed` is not `sip` or if the user has a subscription, otherwise 15 minutes before the current time.
                 *      */
                end?: components["parameters"]["StockEnd"];
                /** @description The maximum number of data points to return in the response page.
                 *     The API may return less, even if there are more available data points in the requested interval.
                 *     Always check the `next_page_token` for more pages.
                 *     The limit applies to the total number of data points, not per symbol!
                 *      */
                limit?: components["parameters"]["Limit"];
                /** @description The as-of date of the queried stock symbol(s). Format: YYYY-MM-DD. Default: current day.
                 *
                 *     This date is used to identify the underlying entity of the provided symbol(s), so that name changes for this entity can be found. Data for past symbol(s) is returned if the query date range spans the name change.
                 *
                 *     The special value of "-" means symbol mapping is skipped. Data is returned based on the symbol alone without looking up previous names. The same happens if the queried symbol is not found on the given `asof` date.
                 *
                 *     Example: FB was renamed to META in 2022-06-09. Querying META with an `asof` date after 2022-06-09 will also yield FB data. The data for the FB ticker will be labeled as META because they are considered the same underlying entity as of 2022-06-09. Querying FB with an `asof` date after 2022-06-09 will only return data with the FB ticker, not with META. But with an `asof` date before 2022-06-09, META will also be returned (as FB).
                 *      */
                asof?: components["parameters"]["AsOf"];
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. Default: `sip`.
                 *      */
                feed?: components["parameters"]["StockHistoricalFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
                /** @description The pagination token from which to continue. The value to pass here is returned in specific requests when more data is available, usually because of a response result limit.
                 *      */
                page_token?: components["parameters"]["PageToken"];
                /** @description Sort data in ascending or descending order. */
                sort?: components["parameters"]["Sort"];
            };
            header?: never;
            path: {
                /**
                 * @description The symbol to query.
                 * @example AAPL
                 */
                symbol: components["parameters"]["StockSymbol"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTradesRespSingle"];
                };
            };
        };
    };
    StockLatestTradeSingle: {
        parameters: {
            query?: {
                /** @description The source feed of the data: `sip` contains all US exchanges, `iex` contains only the Investors EXchange, and `otc` contains over-the-counter exchanges. `delayed_sip` is SIP data with a 15 minute delay. Default: `sip` if the user has the unlimited subscription, otherwise `iex`.
                 *      */
                feed?: components["parameters"]["StockLatestFeed"];
                /** @description The currency of all prices in ISO 4217 format. Default: USD.
                 *      */
                currency?: components["parameters"]["Currency"];
            };
            header?: never;
            path: {
                /**
                 * @description The symbol to query.
                 * @example AAPL
                 */
                symbol: components["parameters"]["StockSymbol"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockLatestTradesRespSingle"];
                };
            };
        };
    };
}
